ACHTUNG: dwukierunkwość chciał komando (inna ścieżka od Mietka do Zenka i z powrotem może być), 
﻿chciał też wielu połączeń między użytkownikami
﻿
﻿warto skopiować pomysł od niektórych grup z podglądam tablicy mapowań w węzłach - albo z Nodixa, albo Managerix odpytuje
﻿przez Agentixa i drukuje do loga
﻿
﻿
﻿
﻿PROTOKÓŁ KOMUNIKACJI

nazwy:
	LRM - Link Resource Manager
	RC - Routing Controller			jego adres to zawsze numerSieci.numerPodsieci.0 //Routix?
	CC - Connection Controller		jego adres to zawsze numerSieci.numerPodsieci.1
	NCC - Network Call Controller		//dla tego rodzynka można dać numersieci = 0 na przykład, wtedy chmura też ogarnie
	POL - Policy
	DIR - Directory

logowanie do chmury:

	CLIENT - CLOUD : SPacket(myAddr, new Address(0.0.0), "HELLO") <- jak chmura zobaczy że adres destination to "cloud" to wie że to o nią chodzi

komunikacja przez chmurę: //zrobiłem już klasę do tego SPacket

	SPacket (string sender, string destination, List<string> argumenty)

przestrzeń adresowa:

	numerSieci.numerPodsieci.numerHosta

zakładając jedną sieć i kilka podsieci adresy wyglądałyby w stylu 1.5.7 itp, trochę jak adresy IP
RC i CC wiedziałyby której podsieci odpowiadają

komunikacja między LRM:
//chmury kablowej nie ruszamy, czyli trzeba użyć tej samej klasy serializowanej tylko vp,vc dać -1 i w payload 
//dać wiadomość w formacie np. <nazwa wysyłającego/jego adres> <nr portu wyjściowego> , musi być info o porcie!!!

poprzez chmurę kablową wysyłanie wiadomości na VPI=0 VCI = 0 -1 treści "mojAdres" //patrz wyżej, nie sam adres
po np 5 sekundach LRM zakłada że zna wszystkich sąsiadów. Wie którzy z nich są w innych podsieciach (na podstawie adresów)
	z tym timerem 5 sekund to czuję że zabawa będzie

komunikacja RC - RC
	po wciśnięciu przycisku "ustal topologię" w Routixie wysyła on do wszystkich sąsiednich podsieci informację o pozostałych osiągalnych podsieciach, po czym ustala zmięnną bool na 5 sekund i nie wysyła więcej informacji przez ten czas
	RC1 -> RC2 : TOPOLOGY 2 3 4 VIA mójnumerPodsieci
		 w skrócie - RC podsieci 2 dowie się, że przez podsieć 1 jest w stanie dotrzeć do podsieci 3 i 4 (to 2 zignoruje bo będzie dotyczyć niego samego, wygodniej mi to będzie zaimplementować)
	żeby nie klikać tego przycisku we wszystkich RC każdy po otrzymaniu takiej wiadomości rozsyła informację o sobie do wszystkich sąsiadów ORAZ przekazuje otrzymaną wiadomość (żeby pakiet rozesłany z jednej podsieci przeszedł przez całą sieć)
	DLATEGO jest ten blok na 5 sekund bo by sie zasrały tymi wiadomościami w nieskończonej pętli. Można bezpiecznie założyć że przez 5 sekund wszystkie zdążą wszystko wysłać
	RC wie z jakimi podsieciami graniczy dzięki localTopology pobranej od poszczególnych LRM

komunikacja LRM - RC

logowanie
	LRM -> RC : HELLO mojAdres //skąd brać te adresy? z konfiga wczytamy?
	RC -> LRM : jestJużTakiAdresWSieci ? ADDR_TAKEN : OK 
		chyba rozumiecie o co tu chodzi xd

pobranie listy podłączonych adresów (NA ŻĄDANIE RC)
	RC -> LRM : REQ_TOPOLOGY
	LRM -> RC : TOPOLOGY addr1 addr2 addr3... 
		wysyłanie w jednej linii adresów wszystkich sąsiadów, na podstawie tej wiadomości RC tworzy graf sieci
//przesyłamy tu także info nie tylko o dostępnych sąsiadach za pomocą łączą, ale też VP?

pytanie o wolne zasoby
	RC -> LRM : IS_LINK_AVAILIBLE SNP
		tutaj jest pytanie o to SNP, jak dokładnie zostanie ono opisane to zrobimy w przyszłości
		może to być pytanie o łącze między klientami albo o VPI, nie wiem
	LRM -> RC : czyWolne ? YES ADDR_DOCELOWY : NO ADDR_DOCELOWY 
	LRM musi odpowiadać o którym łączu mówi!
	RC zmienia lub nie graf sieci

komunikacja CC - RC

pytanie o ścieżkę
	CC -> RC : REQ_ROUTE addr1 addr2
	RC oblicza ścieżkę, pyta się LRM(ja bym pytał przed) po drodze czy jest dostępna, jeśli tak to ok jeśli nie to oblicza inną
	RC -> CC ROUTE addr1 addrPosredni1 addrPosredni2 addrPosredni3 addr2
				gdy nie ma ścieżki RC->CC NO_ROUTE
	LRM -> CC : HELLO mojaNazwa
	CC -> LRM : ADD_MAPPING PORT VPI VCI PORT VPI VCI // ja bym zajmował zarówno w weźle startowym i końcowym zasoby, identyfikowanie po vpi vci port
	CC -> LRM : DEL_MAPPING PORT VPI VCI PORT VPI VCI
	CC -> CC : REQ_CONN connId lastSubAddr currSubAddr vpi vci finalDestAddr
	
	Co do LRM:
	-trzeba ustalić sposób w jakim każdy LRM ma przechowywać info o zajtości łącza i jego max przepustowości (ogarnąć też te VP?)
		patrz niżej - w tym pliku do każdego łącza można dać też przepustowość łąćza

	-musisz mi Radku jakoś udostępnić listę wszystkich interfejsów, abym mógł wszystkich zaspamować dookoła
		myślę że tutaj trzeba będzie to zrobić jako plik wczytywany podczas startu węzła. po zalogowaniu się do chmury sterowania poinformuje ją o swoich interfejsach. Taka propozycja moja


	-porponuje rozsyłanie wiadomosci o połączeniach między węzłami/klientami w postaci adres1 port1 adres 2 port 2
	gdzie z nr 1 jest startowy jakby (te z 2 będą dotyczyły tego, który wysyła całą ścieżkę do RC)
		jakich wiadomości o połączeniach między węzłami? sprecyzuj bo nie ogarniam xD


	- Radek udostepnij mi metodę żebym móg jakoś wypisywać z LRMa jakieś logi, komandos z chęcią zobaczy działanie LRMa
		SetText(String text) była, jest i będzie
	
	komunikacja PD-Client:
	C: client
PD: Policy-Directory

NA STYKU C - PD wysyłamy SPacket

PolicyDirectory ma adres 1.0.1

wybór nazwy klienta:
C -> PD : LOGIN Zenek 1.2.4(adres Zenka)
PD -> C : OK lub NAME_TAKEN gdy nazwa jest już zajęta

pobranie klientów z sieci:

C-> PD : REQ_CLIENTS
PD -> C : CLIENTS Zenek Mietek Gówniak

chęć nawiązania połączenia Mietka z Zenkiem (Mietek gada)

C -> PD : REQ_CONN Zenek przepustowość
PD sprawdza czy Mietek może nawiązać połączenie o danej przepustowości
PD -> C : YES adresZenka lub NO 
NCC : po szynie chmury kontrolnej komunikacja leci dalej


	pliki konfigracyjne Nodixa i Clientixa:

	jeśli chodzi o dodawanie vpivci i klientów itp. to zostaje tak jak było, jest dodana linijka
	ADD_ROUTE port adresdocelowy przepustowoscWMbit/s, np 
	ADD_ROUTE 1 1.4.2 6

--- Teoria chumr -------------------------------------------------------------------------------

TC - Chmura transporowa
	znana kiedyś jako: chmura kablowa (Cloudix)
	transportuje pakiety z payloadem zserialozowane Packet.ATMPacket
	potrafi wysterowywać na odpowiednie paczki na adresy (AdressLibrary.Address) i nowymi numerami portów
	- pierwszy pakiet typu Client Mietek 1.8.2 (czysty string)
	- następne pakiety to Packet.ATMPacket
	sprawdza i loguje kto co i jak (nie utraciła możliwości rozpoznawania Klient/Węzeł)
	nie potrafi analizować nagłówka ATM
	ma kolor niebieski
	
SC - Chumra sterująca
	znaja kiedyś jako: ControlCloudix 
	- transportuje zserialozowane pakiety z warstwy sterowania siecią Packet.SPacket 
	potrafi wysterowywać na odpowiednie paczki na adresy (AdressLibrary.Address)
	ma kolor zielony

-------------------------------------------------------------------------------------------------
__________________________________________________________________________________________________


Podsumowanie LRM w jednym miejscu, żebym wiedział co robić i o czym nie zapomnieć
- komunikacja między LRM:
starą chmurą wysyłam stare pakiety z vp,vc = -1 i w payload wiadomość w formacie np. SPAM 1.2.3 1 (co oznacza mój adres to 1.2.3 wysyłam na port 1)
- nodix wykrywa dziwny pakiet i przekazuje go do lrm, lrm odczytuje wiadomość z payload i LRM stwierdza, że dostał to na swój port 2, jego adres to 4.5.6
z tego wykminia że ścieżka to 1.2.3 1 2 4.5.6 (adres1, port1, port2, adres2 czy inna kolejnosć)
- postępowanie ze scieżką w odpowiednim punkcie
- rozsyłanie po wywołaniu metody Spamuj() (do użycia w momencie jak cała sieć wstanie, Radek musi ją wywołać guzikiem czy jakoś), potem wywoływana na prośbę RC: komendą np. SPAMUJ
- ponoiwne spamowanie po prośbie RC, spowodowanej trapem z SC


					to powyżej jest opcjonalne, na razie wczytujemy config z pliku.
					oczywiście potem możemy dodać rozkmine topologii sieci na bieżąco

logowanie
	LRM -> RC : HELLO mojAdres //skąd brać te adresy? z konfiga wczytamy? !!!nadal nie wiem, dać adres tożsamy z nodixem?
									tak
	RC -> LRM : jestJużTakiAdresWSieci ? ADDR_TAKEN : OK 


pobranie listy podłączonych adresów (NA ŻĄDANIE RC) - wysyłanie topologii z bufora, który trzyma osttanio zebraną topologię
	RC -> LRM : REQ_TOPOLOGY
	LRM -> RC : TOPOLOGY addr1 addr2 addr3... 
		wysyłanie w jednej linii adresów wszystkich sąsiadów, na podstawie tej wiadomości RC tworzy graf sieci
przesyłamy tu także info nie tylko o dostępnych sąsiadach za pomocą łączą, ale też VP? nadal nie mam odp!!!
									bo nadal nie wiem, na razie same adresy

pytanie o wolne zasoby !!!! to jak rozwiązać?
	RC -> LRM : IS_LINK_AVAILIBLE SNP
		tutaj jest pytanie o to SNP, jak dokładnie zostanie ono opisane to zrobimy w przyszłości
		może to być pytanie o łącze między klientami albo o VPI, nie wiem
									na razie pytanie o całe łącze
	LRM -> RC : czyWolne ? YES ADDR_DOCELOWY : NO ADDR_DOCELOWY 
	LRM musi odpowiadać o którym łączu mówi!
	RC zmienia lub nie graf sieci

	i tutaj zabawa - jak LRM sprawdza czy łącze jest wolne?
	po pierwsze - musi mieć w sobie słownik (na przykład) <adres sąsiada, aktualna wolna przepustowość>
					jak ma wolna przepustowość to zmniejsza ją o 2Mbit/s (jeśli taka predkosc bazowa zakladamy)
					i wysyła na port tego adresu pakiet ATM vpi=-1 vci=-1 payload="isAlive"

					gdy węzeł po drugiej stronie odbierze taki pakiet wysyła go z powrotem z payloadem "yes"
					gdy węzeł pierwszy odbierze z powrotem pakiet z payloadem "yes" zakłada że łącze jest wolne i odsyła info do RC
					gdy minie timer (załóżmy że 3 sekundy) bez odpowiedzi wysyła że łącze jest złe


	CC -> LRM : DEL PORT VPI VCI PORT VPI VCI

	w odp odsyłam ADDED albo DELETED albo ERROR DELETE albo ERROR ADD

	
	- info o łączach Radek zrobił, pytanie czy rozdzielamy jedno łacze na kilka o różnych VP?
	- LRM loguje swoje ustalenia do Nodixa
							jak pisałem - jest, była i będzie metoda publiczna SetText, tylko ją wywołać trzeba


	TODO:
	- rozsyłanie metodą Spamuj wszytskich sąsiadów z listy
	- obsługa ATMPacket spamującego - zebranie info o sąsiadach, po zebraniu info od sąsiadów (pytanie ile czekać?! mogę automatycznie nie wysyłać do RC, tylko czekać na żądanie,
	 wtedy wyślę to co zebrałem) 
	 - wysyłka topologii na żądanie RC
	 - ogarnięcie czytania i wysyłania pakietów z/do SC
	 - zarządzenie zasobami
	 - timer
	 - analiza payload pakietu i albo odsyłanie go albo ustalenie że łącze działa
	 
----------------------------------------------------------------
----------------------------------------------------------------
Komunikacja CC -> LRM i LRM -> CC

LRM -> CC HELLO myName
CC -> LRM ADD_MAPPING inAddr inVp inVC outAddr outVP outVC do NODIX
CC -> LRM ADD_MAPPING addr vp vc idConn

przykład:
CC -> NODIXA 1.1.3 pomiedzy 1.1.2 i 1.1.4
ADD_MAPPING 1.1.2 1 1 1.1.4 1 1

CC -> CLIENTX do którego dzwonimy a ostatni NODIX to 1.1.3 a numer połączenia to 
ADD_MAPPING 1.1.3 1 1 88

DEL_MAPPINGI mają taki sam format.

-----------------------------------------------------------------


ChmuraS gdy wyłapie wyjątek gniazdka (zerwanie połaczenia z Nodixem lub Clientixem) to rozsyła do wszystkich podłączonych do siebie LRMów wiadomosć np. DEAD 1.2.3
Następnie każdy LRM sprawdza, czy podany adres 1.2.3 dotyczy jego sąsiada, jeśli tak powiadamia swoje CC i RC wiadomoscią DEAD 1.2.3, jeśli nie nic nie wysyła

SC w przypadku jak umrze węzeł:
1. SC ->> (do wszytkich) Node (w sensie LRM, bo z tym ma SC połaczenie w Nodach) DEAD 1.2.3
LRM gdy to był jego sąsiad
LRM ->> CC: DEAD 1.2.3
LRM ->> RC: DEAD 1.2.3
LRM gdy to nie jego sąsiad padł
LRM ->> mam urlop :P

----------------------------------------------------------------

++ Można ściemnić że węzeł kliencki jest oddzielnie podłaczony do Node'a
albo powiedzieć wprost że to u nas jest zespolone i chuj 	

------------------------------------------------------------------------

FORMAT JAK SĄ ZAPISYWANE ŚCIEŻKI W CONFIGU LRMA
port adresdocelowy przepustowość vpiPoSpacji
NA PRZYKŁAD
1 1.2.4 8 3 4 5
to znaczy - na porcie 1 jest osiągalny adres 1.2.4, cało łącze ma przepustowość 8Mbit/s, działają na nim VPI 3, 4 i 5.

VPI przechowywane są w klasie Route w obiekcie List<int> VPIList. Poza tym ta klasa jest bez zmian

Zbieranie info o dostępnych VPI
CC pyta LRM o dostępne u sąsiadów VPI

CC >> LRM: REQ_VPATHS
LRM >> CC: RES_VPATHS adres1#vp1#vp2#vp3 adres2#vp1#vp2 adres3#vp1 adres4#vp1#vp2#vp3#vp4#vp5

Zbieranie info o dostępnych VPI
CC pyta LRM o dostępne u sąsiadów VPI

CC >> LRM: REQ_VPATHS
LRM >> CC: RES_VPATHS adres1#vp1#vp2#vp3 adres2#vp1#vp2 adres3#vp1 adres4#vp1#vp2#vp3#vp4#vp5

---------------------------------------------------------------------------

SC (adres broadcast / adres całej sieci):
		1.0.0
PD:		1.0.1
NCC:	1.0.2

NOWY PROTOKÓŁ INICJACYJNY:
Codename: proni
Client A inicjuje połączenie
Clinet B odbiera
tutaj klient A to Mietek - 1.1.2
a klient B to Zenek - 1.2.3

1. Mietek loguje się do sieci do NCC
	A -> NCC:		LOGIN 1.1.2 Mietek
	NCC -> PD:		LOGIN 1.1.2 Mietek
	+ PD -> NCC:	LOGGED 1.1.2 Mietek
	  NCC -> A:		OK
	- PD -> NCC		NAME_TAKEN 1.1.2 Mietek
	  NCC -> A:		NAME_TAKEN

2. Mietek wysyła request że chce nazwy innych klientów
	A -> NCC:		REQ_CLIENTS
	NCC -> PD:		REQ_CLIENTS 1.1.2

2,5. PD odpowiada na zapytanie
	PD -> NCC:		CLIENTS 1.1.2 Zenek k2 k3 k4
	NCC -> A:		CLIENTS Zenek k2 k3 k4

--- tu kończy się niezależna sekcja - bez następstw przyczynowo-skutkowych

3. A (Mietek) wybiera B (Zenek) i prosi o połacznie z nim np 6Mbps
	A -> NCC:		REQ_CALL Zenek 6
	(że chce do Zenka 6Mbps)
	NCC -> PD:		REQ_CALL 1.1.2 Zenek 6
	(adres 1.1.2 chce do Zenka 6Mbps)
	+ PD -> NCC:	OK 1.1.2 Zenek 6 1.2.3
	  (PD odsyła że ok, zgadza się na takie połączenie przesyłając adres Zenka 1.2.3)  
	  (tu jak chesz mogę wysłać info że policy się zgadza typu:) 
	  (NCC -> A:	YES Zenek)
	  NCC -> B:		CALLING Mietek 6 888
	  (mówi Zenkowi że dzwoni Mietek 6Mbps o numerze requestu (nie połaczenia) 888)
	(idź dalej do kroku 4.)
	- PD -> NCC:	NO 1.1.2 Zenek 6
	  NCC -> A:		NO Zenek
	-> W przypadku NO, protokół się przerywa

4. Akceptacja
	+ B -> NCC:		ACK Mietek 6 888
	  NCC -> A:		ACK Zenek
	(idź dalej do kroku 5.)
	- B -> NCC:		NCK Mietek 6 888
	  NCC -> A:		NCK Zenek
	-> W przypadku NO, protokół się przerywa

--- teraz faza aktywnego zestawiania połączeń - 
każde połączenie z requesta 6Mbps od tej pory jest niezależne 
i może być EST/NOEST/LOST itp więc to kwestia klienta co z tym zrobi.

5. Jeśli jest akceptacja itp to zestawiamy
	(NCC ma adres Zenka bo otrzymał wcześniej przy zapytaniu PD)
	NCC -> CC(A):	REQ_CONN 1.1.2 1.2.3 77	
	NCC -> CC(A):	REQ_CONN 1.1.2 1.2.3 86
	NCC -> CC(A):	REQ_CONN 1.1.2 1.2.3 95
	(6Mbps to 3 niezależne połączenia, NCC nie wie które należą do których)

6. NCC czeka na odbiór potwierdzeń (każde jest niezalżne więc podam dalej na przykąłdzie jednego)
	+ CC(B) -> NCC:	CONN_EST 77
	  NCC -> A:		CONN_EST 77
	- CC -> NCC:	CONN_NOEST 77
	  NCC -> A:		CONN_NOEST 77
	  (ew można jeszcze do Zenka dac że się nie udało)
	  (NCC -> B:	CONN_NOEST Mietek)

7. Rozłączanie
	A -> NCC:		REQ_DISCONN 77
	NCC -> CC(A)	REQ_DISCONN 77
	(tu oszukujemy i mówimy od razu że połączenie zostało rozłączone)
	( nie czekamy na: CC(B) -> NCC:	CONN_DISCONN 77 )
	NCC -> A:		CONN_DISCONN 77

8. Rozwalenie węzła
	CC -> NCC:		CONN_LOST 77
	NCC -> A:		CONN_LOST 77
	NCC -> B:		CONN_LOST 77